{"version":3,"sources":["util.js","App.js","index.js"],"names":["getRandomColor","Math","floor","random","pow","toString","padEnd","SubText","subText","style","backgroundColor","Text","memo","text","padding","App","useState","a","b","booleans","setBooleans","text1","text2","onClick","state","ReactDOM","render","document","getElementById"],"mappings":"kLAAaA,EAAiB,iBAC5B,IACAC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKG,IAAI,IAAK,IACtCC,SAAS,IACTC,OAAO,EAAG,MCDTC,EAAU,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjB,OAAO,yBAAKC,MAAO,CAAEC,gBAAiBV,MAAqBQ,IAOvDG,EAAOC,gBAAK,YAAe,IAAZC,EAAW,EAAXA,KACnB,OACE,yBAAKJ,MAAO,CAAEC,gBAAiBV,IAAkBc,QAAS,SACvDD,EACD,kBAAC,EAAD,CAASL,QAAO,mBAAcK,SAiCrBE,MA5Bf,WAAgB,IAAD,EACmBC,mBAAS,CAAEC,GAAG,EAAMC,GAAG,IAD1C,mBACNC,EADM,KACIC,EADJ,KAGPC,EAAQF,EAASF,EAAI,QAAU,gBAC/BK,EAAQH,EAASD,EAAI,QAAU,gBAErC,OACE,oCACE,kBAACP,EAAD,CAAME,KAAMQ,IACZ,kBAACV,EAAD,CAAME,KAAMS,IACZ,4BACEC,QAAS,WACPH,GAAY,SAAAI,GAAK,sBAAUA,EAAV,CAAiBP,GAAIO,EAAMP,SAFhD,eAOA,4BACEM,QAAS,WACPH,GAAY,SAAAI,GAAK,sBAAUA,EAAV,CAAiBN,GAAIM,EAAMN,SAFhD,iBCjCNO,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.279abd68.chunk.js","sourcesContent":["export const getRandomColor = () =>\r\n  '#' +\r\n  Math.floor(Math.random() * Math.pow(255, 3))\r\n    .toString(16)\r\n    .padEnd(6, 'f');\r\n","import React, { useState, memo } from 'react';\nimport { getRandomColor } from './util';\n\nconst SubText = ({ subText }) => {\n  return <div style={{ backgroundColor: getRandomColor() }}>{subText}</div>;\n};\n\n// By memo-ing the Text component, it's entire sub-tree\n// is spared from unnecessary renders, by skipping them\n// when the new `text` prop it receives is identical to the\n// previous one.\nconst Text = memo(({ text }) => {\n  return (\n    <div style={{ backgroundColor: getRandomColor(), padding: '24px' }}>\n      {text}\n      <SubText subText={`SubText: ${text}`} />\n    </div>\n  );\n});\n\nfunction App() {\n  const [booleans, setBooleans] = useState({ a: true, b: true });\n\n  const text1 = booleans.a ? 'Text1' : 'Text1 Awesome';\n  const text2 = booleans.b ? 'Text2' : 'Text2 Awesome';\n\n  return (\n    <>\n      <Text text={text1} />\n      <Text text={text2} />\n      <button\n        onClick={() => {\n          setBooleans(state => ({ ...state, a: !state.a }));\n        }}\n      >\n        Change Sub1\n      </button>\n      <button\n        onClick={() => {\n          setBooleans(state => ({ ...state, b: !state.b }));\n        }}\n      >\n        Change Sub2\n      </button>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}